/*
 * Secure Calculator API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.Services;

namespace IO.Swagger.Controllers
{ 

    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AuthenticationApiController : ControllerBase
    {
        private readonly IUserService _userService;
        private readonly IJwtTokenService _jwtTokenService;
        public AuthenticationApiController(IUserService userService, IJwtTokenService jwtTokenService)
        {
            _userService=userService;
            _jwtTokenService=jwtTokenService;   
        }
        /// <summary>
        /// User login
        /// </summary>
        /// <param name="body">User credentials</param>
        /// <response code="200">JWT token</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/auth/login")]
        [ValidateModelState]
        [SwaggerOperation("AuthLoginPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(AuthToken), description: "JWT token")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        public virtual IActionResult AuthLoginPost([FromBody]User body)
        {
            try
            {
                if(body == null)
                    return BadRequest("Email cannot be empty");
                var user=_userService.getUserInfoByEmail(body.Email);
                if (user.Result == null) 
                    return BadRequest("no such email in the system, please register");
                return Ok(_jwtTokenService.GenerateToken(body.Email));
            }
            catch (Exception e)
            {
                return StatusCode(statusCode: 500);
            }
        }

        /// <summary>
        /// Logout (delete user)
        /// </summary>
        /// <param name="email"></param>
        /// <response code="204">User deleted successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpDelete]
        [Route("/auth/logout")]
        [ValidateModelState]
        [SwaggerOperation("AuthLogoutDelete")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 204, type: typeof(OkObjectResult), description: "Delete succeded")]
        public virtual IActionResult AuthLogoutDelete([FromQuery][Required()]string email)
        {
            try
            {
                var user = _userService.getUserInfoByEmail(email).Result;
                if (user == null)
                {
                    return NotFound(new { Error = "User not found" });
                }

                _userService.removeUserInfo(new Models.User() { Email = email });
                return NoContent();  // 204 No Content
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Error = ex.Message });
            }
        }

        /// <summary>
        /// Register a new user
        /// </summary>
        /// <param name="body">New user data</param>
        /// <response code="201">User created successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/auth/register")]
        [ValidateModelState]
        [SwaggerOperation("AuthRegisterPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(User), description: "User created successfully")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "Conflict")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        public virtual IActionResult AuthRegisterPost([FromBody]User body)
        {
            try
            {
                var existingUser = _userService.getUserInfoByEmail(body.Email).Result;
                if (existingUser != null)
                {
                    return Conflict(new ErrorResponse{ Error = "User already exists" }); // 409 Conflict
                }

                _userService.addUserInfo(body);
                return CreatedAtAction(nameof(AuthRegisterPost), new { email = body.Email }, body); // 201 Created
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Error = ex.Message }); // 500 Internal Server Error
            }
        }
    }
}
